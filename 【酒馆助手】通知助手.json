{
    "id": "2d7b624b-cbbd-4cb8-ac36-c63621ded94e",
    "name": "通知助手",
    "content": "// ======================\n// 配置参数\n// ======================\nconst ICON_URL = \"img/logo.png\"; // 图标URL\nconst enableLogging = true; // 调试日志开关\n// ======================\n// 消息模板库\nconst MESSAGE_TEMPLATES = [\n    \"💬 {charName}等待您的回复\",\n    \"{charName}分享了新的想法✨\",\n    \"👀 您关注的主播{charName}突然开播！\",\n    \"🔞 {charName}的18+付费内容预览...\",\n    \"🖋️ {charName}在故事中写下新篇\",\n    \"🌃 {charName}的午夜电台正在播放您的黑历史\",\n    \"{charName}发给您的快递📦️已经送达，请尽快签收\",\n    \"📱 {charName}邀请您加入对话\",\n    \"{charName}的聊天记录已加密🔐 请输入密码*******查看\",\n    \"收到来自{charName}的精神损失费账单🧾，请及时赔付\",\n    \"🎉 {charName}的周年庆邀请函已送达，点击查看特权\",\n    \"🚨 紧急！{charName}的聊天室出现未读高危消息\",\n    \"🎁 您有来自{charName的未领取礼物（剩余24小时）\",\n    \"🔔 {charName}的定时提醒：该喝水休息啦！\",\n    \"🎈 生日惊喜！{charName}准备了特别祝福\",\n    \"🔍 检测到{charName}的历史聊天中有敏感词回溯\",\n    \"🌧️ {charName}的雨季限定故事已更新\",\n    \"🛎️ 您预约的{charName}专属服务已就绪\",\n    \"❄️ {charName}的雪国篇章新增互动选项\",\n    \"🕵️♂️ 匿名用户正在窥探{charName}的聊天记录\"\n];\n// ======================\n// 全局变量\n// ======================\nconst NOTIFICATION_COOLDOWN = 5000; // 5秒通知冷却（无用）\nlet lastNotificationTime = 0;\nconst IS_MOBILE = isMobileDevice()\nconst NOTIFICATION_BRIDGE_ID = \"tampermonkey-notification-bridge\";\n// ======================\n// 工具函数\n// ======================\nfunction log(...args) {\n    enableLogging && console.log(\"[NativeNotifier]\", ...args);\n}\n\nfunction logError(...args) {\n    enableLogging && console.error(\"[NativeNotifier]\", ...args);\n}\n\nfunction isNotificationSupported() {\n    return \"Notification\" in window;\n}\nfunction isMobileDevice() {\n    const maxTouchPoints = navigator.maxTouchPoints || 0;\n    const hasOrientation = typeof window.orientation !== 'undefined';\n    const userAgentDataMobile = navigator.userAgentData ? navigator.userAgentData.mobile : undefined;\n    const touchEventSupported = 'ontouchstart' in window;\n  \n    if (userAgentDataMobile === true) {\n      return true;\n    }\n    if (\n      (maxTouchPoints > 0 || touchEventSupported) &&\n      (hasOrientation)\n    ) {\n      return true;\n    }\n  \n    return false;\n  }\n  \n// ======================\n// 初始化通知按钮\n// ======================\nfunction initNotificationButton() {\n    const parentDoc = window.parent.document;\n    const targetComponent = parentDoc.getElementById(\"2d7b624b-cbbd-4cb8-ac36-c63621ded94e\");\n\n    if (!targetComponent) {\n        logError(\"未找到目标组件\");\n        return;\n    }\n\n    const controlDiv = targetComponent.querySelector(\".script-item-control\");\n    if (!controlDiv) {\n        logError(\"未找到script-item-control div\");\n        return;\n    }\n\n    // 创建按钮元素\n    const button = document.createElement(\"button\");\n    button.className = \"menu_button interactable\";\n    button.innerHTML = \"🔔\";\n\n    // 按钮点击事件处理\n    button.addEventListener(\"click\", async () => {\n        if (!isNotificationSupported()) {\n            alert(\"您的浏览器不支持通知功能\");\n            return;\n        }\n        log(\"点击通知按钮\"); // 添加日志\n        const permission = await Notification.requestPermission();\n        if (permission === \"granted\") {\n            await showNativeNotification(\"SillyTavern\", \"通知权限已启用\");\n            button.innerHTML = \"🔔\";\n            button.style.backgroundColor = \"#2196F3\";\n        } else {\n            alert(\"您拒绝了通知权限\");\n        }\n    });\n\n    controlDiv.appendChild(button);\n    log(\"通知按钮已创建\");\n}\n\n\n// ======================\n// 核心功能函数\n// ======================\nasync function showNativeNotification(title, body) {\n    const now = Date.now();\n    if (now - lastNotificationTime < NOTIFICATION_COOLDOWN) {\n        log(`通知冷却中，跳过 (${(now - lastNotificationTime) / 1000}秒/${NOTIFICATION_COOLDOWN / 1000}秒)`);\n        return;\n    }\n\n    try {\n        const charData = await getCharData();\n        if (!charData) {\n            logError(\"获取角色数据失败\");\n        }\n\n        const charName = charData?.name || \"AI\";\n        const processedBody = body.replace(/{charName}/g, charName);\n\n        if (!(await requestNotificationPermission())) {\n            logError(\"通知权限未授予\");\n            return;\n        }\n        if (IS_MOBILE) { // Enable this condition\n            log(\"显示移动端通知\");\n            showMobileNotification(title, processedBody);\n            return;\n        }\n        if (\"Notification\" in window && Notification.permission === \"granted\") {\n            log(\"显示PC端通知\");\n            new Notification(title, {\n                body: processedBody,\n                icon: ICON_URL,\n            });\n            lastNotificationTime = now;\n            log(\"通知已发送\");\n        } else {\n            logError(\"PC端通知权限未授予\");\n        }\n    } catch (e) {\n        logError(\"显示通知异常:\", e);\n    }\n}\n// ======================\n// 移动端通知组件\n// ======================\nfunction showMobileNotification(title, message) {\n    const parentDoc = window.parent.document;\n    let bridgeElement = parentDoc.getElementById(NOTIFICATION_BRIDGE_ID);\n    if (!bridgeElement) {\n        bridgeElement = parentDoc.createElement(\"div\");\n        bridgeElement.id = NOTIFICATION_BRIDGE_ID;\n        // Make it hidden but part of the DOM\n        bridgeElement.style.display = \"none\";\n        parentDoc.body.appendChild(bridgeElement);\n    }\n    // Update the content to trigger the Tampermonkey script's listener\n    bridgeElement.innerText = JSON.stringify({ title, message, icon: ICON_URL });\n    log(\"Mobile notification triggered via bridge:\", { title, message });\n}\n\n\n// ======================\n// 权限管理系统\n// ======================\nasync function requestNotificationPermission() {\n    if (!isNotificationSupported()) {\n        if (IS_MOBILE) {\n            alert('请启用通知权限(APP通知权限、浏览器内全局通知权限、浏览器内站点通知权限)');\n        }\n        return false;\n    }\n    return (await Notification.requestPermission()) === \"granted\";\n}\n$(async () => {\n    // ======================\n    // 事件监听系统\n    // ======================\n    log(\"初始化事件监听系统...\");\n    log(\"IS_MOBILE:\", IS_MOBILE);\n\n    // 初始化通知桥接元素\n    const parentDoc = window.parent.document;\n    let bridgeElement = parentDoc.getElementById(NOTIFICATION_BRIDGE_ID);\n    if (!bridgeElement) {\n        bridgeElement = parentDoc.createElement(\"div\");\n        bridgeElement.id = NOTIFICATION_BRIDGE_ID;\n        bridgeElement.style.display = \"none\";\n        parentDoc.body.appendChild(bridgeElement);\n        log(\"创建通知桥接元素\");\n    }\n\n    initNotificationButton();\n    log(\"系统初始化完成\");\n    eventOn(tavern_events.MESSAGE_RECEIVED, () => {\n        log(\"检测到新消息事件\");\n\n        setTimeout(() => {\n            const $lastMessage = $('.mes').last();\n\n            if ($lastMessage.length === 0) {\n                log(\"未找到消息元素\");\n                return;\n            }\n\n            if (!$lastMessage.hasClass('user')) {\n                log(\"检测到AI消息，发送通知\");\n                const template = MESSAGE_TEMPLATES[Math.floor(Math.random() * MESSAGE_TEMPLATES.length)];\n                showNativeNotification(\"SillyTavern\", template);\n            }\n        }, 100);\n    });\n\n});",
    "info": "",
    "buttons": []
}